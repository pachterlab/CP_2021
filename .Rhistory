new = paste("NA","_",as.character(i),sep="_")
}
i = i+1
}
splitsTree_df[c("annos")] <-
lapply(splitsTree_df[c("annos")], function(col) map(col,newName))
splitsTree_df <-  as.tibble(read_csv("~/Downloads/geneClustDist_SplitsTree.csv"))
#cellTypeDist_SplitsTree (2).csv
#Make annotations Nexus compatible
#Change names
j = 0
na_j = 0
for (i in splitsTree_df["annos"]){
j = j+1
if (is.na(i)){
na_j = na_j +1
splitsTree_df["annos"][j] = paste("NA",as.character(na_j),sep="_")
}
}
splitsTree_df["annos"]
splitsTree_df["annos"][1]
splitsTree_df["annos"][[1]
]
splitsTree_df["annos"][[1]]
splitsTree_df["annos"][[1]][1]
splitsTree_df <-  as.tibble(read_csv("~/Downloads/geneClustDist_SplitsTree.csv"))
#cellTypeDist_SplitsTree (2).csv
#Make annotations Nexus compatible
#Change names
j = 0
na_j = 0
for (i in splitsTree_df["annos"][[1]]){
j = j+1
if (is.na(i)){
na_j = na_j +1
splitsTree_df["annos"][[1]][j] = paste("NA",as.character(na_j),sep="_")
}
}
newName <- function(name){
new = gsub("- ", "",name)
new = gsub(" ", "_",new)
}
splitsTree_df[c("annos")] <-
lapply(splitsTree_df[c("annos")], function(col) map(col,newName))
splitsTree_df <- as.data.frame(splitsTree_df)
rownames(splitsTree_df) <- splitsTree_df$annos
splitsTree_df <- subset(splitsTree_df,select=-c(annos,cluster,X1))
d <- dist(splitsTree_df,upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
write.nexus.dist(d,file="~/Desktop/distGeneClus.nex", append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
library(usedist)
library(phangorn)
library(readr)
library(tidyverse)
library(hash)
#splitsTree_df <-  as.tibble(read_csv("~/Downloads/geneClustDist_SplitsTree.csv"))
splitsTree_df <-  as.tibble(read_csv("~/Downloads/cellTypeDist_SplitsTree (2).csv"))
#Make annotations Nexus compatible
#Change names
j = 0
na_j = 0
for (i in splitsTree_df["annos"][[1]]){
j = j+1
if (is.na(i)){
na_j = na_j +1
splitsTree_df["annos"][[1]][j] = paste("NA",as.character(na_j),sep="_")
}
}
newName <- function(name){
new = gsub("- ", "",name)
new = gsub(" ", "_",new)
}
splitsTree_df[c("annos")] <-
lapply(splitsTree_df[c("annos")], function(col) map(col,newName))
#Convert to df for distance calculations
splitsTree_df <- as.data.frame(splitsTree_df)
rownames(splitsTree_df) <- splitsTree_df$annos
splitsTree_df <- subset(splitsTree_df,select=-c(annos,cluster,X1))
#Get pairwise (Euclidean) distances
d <- dist(splitsTree_df,upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
write.nexus.dist(d,file="~/Desktop/distCellType.nex", append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
library(usedist)
library(phangorn)
library(readr)
library(tidyverse)
library(hash)
#https://voteview.com/data for all data
#Read in matrix (csv) of samples by features
Sall_members <- as.tibble(read_csv("~/Downloads/Sall_members.csv") )
Sall_members <- Sall_members %>% filter(congress == 116 )
Sall_votes <- as.tibble(read_csv("~/Downloads/Sall_votes.csv"))
Sall_votes  <- Sall_votes %>% filter(congress == 116)
#Get real names
Sall_votes[c("name")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$bioname[match(col, Sall_members$icpsr)])
#Get party affiliation
Sall_votes[c("party_code")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$party_code[match(col, Sall_members$icpsr)])
retParty <- function(code) {
if (code == 100) {
return("Dem")
}
else if (code == 200){
return("Rep")
}
else{
return("Ind")
}
}
Sall_votes[c("party")] <-
lapply(Sall_votes[c("party_code")], function(col) map(col,retParty))
# yes-->1, no --> 0, abstain --> 0.5
map_vote <- c(1.0,1.0,1.0, 0.0,0.0,0.0, 0.5,0.5,0.5)
#Get names in Nexus-legal format
Sall_votes <- Sall_votes %>% mutate(cast_code = map_vote[as.integer(cast_code)])
#Change names --> LASTNAME_FirstInitial_Party
newName <- function(name){
new = substr(name, start=1, stop=str_locate(name, ",")[1]+2)
new = gsub(", ", "_",new)
new = gsub(" ", "_",new)
}
Sall_votes[c("name")] <-
lapply(Sall_votes[c("name")], function(col) map(col,newName))
Sall_votes[c("plotID")] = paste(Sall_votes$name, Sall_votes$party, sep="_")
sub_votes = Sall_votes[c('plotID','cast_code','rollnumber')]
votes_df = pivot_wider(sub_votes, names_from = rollnumber, values_from = cast_code)
View(votes_df)
votes_df[500:]
votes_df(500:)
votes_df[500]
votes_df[46500]
votes_df[46,500]
votes_df[45,500]
votes_df <- na.omit(votes_df)
paste('x','y',sep="")
cong = 115
#Read in matrix (csv) of samples by features
Sall_members <- as.tibble(read_csv("~/Downloads/Sall_members.csv") )
Sall_members <- Sall_members %>% filter(congress == cong )
Sall_votes <- as.tibble(read_csv("~/Downloads/Sall_votes.csv"))
Sall_votes  <- Sall_votes %>% filter(congress == cong)
#Get real names
Sall_votes[c("name")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$bioname[match(col, Sall_members$icpsr)])
#Get party affiliation
Sall_votes[c("party_code")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$party_code[match(col, Sall_members$icpsr)])
retParty <- function(code) {
if (code == 100) {
return("Dem")
}
else if (code == 200){
return("Rep")
}
else{
return("Ind")
}
}
Sall_votes[c("party")] <-
lapply(Sall_votes[c("party_code")], function(col) map(col,retParty))
# yes-->1, no --> 0, abstain --> 0.5
map_vote <- c(1.0,1.0,1.0, 0.0,0.0,0.0, 0.5,0.5,0.5)
#Get names in Nexus-legal format
Sall_votes <- Sall_votes %>% mutate(cast_code = map_vote[as.integer(cast_code)])
#Change names --> LASTNAME_FirstInitial_Party
newName <- function(name){
new = substr(name, start=1, stop=str_locate(name, ",")[1]+2)
new = gsub(", ", "_",new)
new = gsub(" ", "_",new)
}
Sall_votes[c("name")] <-
lapply(Sall_votes[c("name")], function(col) map(col,newName))
Sall_votes[c("plotID")] = paste(Sall_votes$name, Sall_votes$party, sep="_")
sub_votes <-  Sall_votes[c('plotID','cast_code','rollnumber')]
votes_df <- pivot_wider(sub_votes, names_from = rollnumber, values_from = cast_code)
votes_df <- na.omit(votes_df) #Remove members who were not present for full term
#Isakson replaced by Loeffler around roll call 400
# votes_df <- votes_df %>% filter(plotID != 'ISAKSON_J_Rep')
# votes_df <- votes_df %>% filter(plotID != 'LOEFFLER_K_Rep')
#Make numeric df, without names column
votes_df <- as.data.frame(votes_df)
rownames(votes_df) <- votes_df$plotID
votes_df <- subset(votes_df,select=-c(plotID))
#Get pairwise (Euclidean) distances
d <- dist(votes_df,method="manhattan",upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
fname <- paste("/Users/tarachari/Desktop/dist_",as.character(cong),"th.nex")
write.nexus.dist(d,file="fname", append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
fname <- paste("/Users/tarachari/Desktop/dist_",as.character(cong),"th.nex")
write.nexus.dist(d,file=fname, append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
fname <- paste("/Users/tarachari/Desktop/dist_",as.character(cong),"th.nex",sep="")
write.nexus.dist(d,file=fname, append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
cong = 114
#Read in matrix (csv) of samples by features
Sall_members <- as.tibble(read_csv("~/Downloads/Sall_members.csv") )
Sall_members <- Sall_members %>% filter(congress == cong )
Sall_votes <- as.tibble(read_csv("~/Downloads/Sall_votes.csv"))
Sall_votes  <- Sall_votes %>% filter(congress == cong)
#Get real names
Sall_votes[c("name")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$bioname[match(col, Sall_members$icpsr)])
#Get party affiliation
Sall_votes[c("party_code")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$party_code[match(col, Sall_members$icpsr)])
retParty <- function(code) {
if (code == 100) {
return("Dem")
}
else if (code == 200){
return("Rep")
}
else{
return("Ind")
}
}
Sall_votes[c("party")] <-
lapply(Sall_votes[c("party_code")], function(col) map(col,retParty))
# yes-->1, no --> 0, abstain --> 0.5
map_vote <- c(1.0,1.0,1.0, 0.0,0.0,0.0, 0.5,0.5,0.5)
#Get names in Nexus-legal format
Sall_votes <- Sall_votes %>% mutate(cast_code = map_vote[as.integer(cast_code)])
#Change names --> LASTNAME_FirstInitial_Party
newName <- function(name){
new = substr(name, start=1, stop=str_locate(name, ",")[1]+2)
new = gsub(", ", "_",new)
new = gsub(" ", "_",new)
}
Sall_votes[c("name")] <-
lapply(Sall_votes[c("name")], function(col) map(col,newName))
Sall_votes[c("plotID")] = paste(Sall_votes$name, Sall_votes$party, sep="_")
sub_votes <-  Sall_votes[c('plotID','cast_code','rollnumber')]
votes_df <- pivot_wider(sub_votes, names_from = rollnumber, values_from = cast_code)
votes_df <- na.omit(votes_df) #Remove members who were not present for full term
#Isakson replaced by Loeffler around roll call 400
# votes_df <- votes_df %>% filter(plotID != 'ISAKSON_J_Rep')
# votes_df <- votes_df %>% filter(plotID != 'LOEFFLER_K_Rep')
#Make numeric df, without names column
votes_df <- as.data.frame(votes_df)
rownames(votes_df) <- votes_df$plotID
votes_df <- subset(votes_df,select=-c(plotID))
#Get pairwise (Euclidean) distances
d <- dist(votes_df,method="manhattan",upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
fname <- paste("/Users/tarachari/Desktop/dist_",as.character(cong),"th.nex",sep="")
write.nexus.dist(d,file=fname, append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
install.packages('rlang')
if (!requireNamespace("BiocManager", quietly=TRUE))
+ install.packages("BiocManager")
BiocManager::install(version = "3.10") #Only for R 3.6
#Read in DE genes (XLOC's) with GO Terms
geneID2GO <- readMappings(file = "~/Downloads/atlas_deseq2_genes_fortopGO.txt")
str(head(geneID2GO ))
library(topGO)
library(ALL)
library(readr)
#Read in DE genes (XLOC's) with GO Terms
geneID2GO <- readMappings(file = "~/Downloads/atlas_deseq2_genes_fortopGO.txt")
str(head(geneID2GO ))
#Add gene modules as factor
atlas_deseq2_genes_fortopGO_metadata <- read_delim("~/Downloads/atlas_deseq2_genes_fortopGO_metadata.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
#Set variables
allMods = unique(atlas_deseq2_genes_fortopGO_metadata$X3)
alpha = 0.05/length(allMods) #Bonferroni correction
getEnrichTerms <- function(geneID2GO, modMetadata, clus){
mods <- factor(as.integer(modMetadata$X3 == clus)) #Choose gene module to make 'interesting'
names(mods) <- names(geneID2GO)
#str(mods)
#Get genes only in module of interest
clusGenes <- function(mods) {
return(mods == 1)
}
subMods <- clusGenes(mods)
#Make GO data
GOdata <- new("topGOdata", ontology = "BP", allGenes = mods,
geneSel = subMods, annot = annFUN.gene2GO, gene2GO = geneID2GO)
#GOdata
#sigGenes(GOdata)
resultFis <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
#resultFis
resultWeight <- runTest(GOdata, statistic = "fisher")
#resultWeight
# pvalsFis <- score(resultFis)
# head(pvalsFis)
pvalsWeight <- score(resultWeight)
#head(pvalsWeight)
#hist(pvalsWeight, 50, xlab = "p-values")
allRes <- GenTable(GOdata, classic = resultFis, weight = resultWeight,
orderBy = "weight", ranksOf = "classic", topNodes = 20)
subRes <- allRes[as.numeric(allRes$weight) < alpha,]
#Write output
write.csv(subRes,file=paste('mod',clus,'_GOTerms.csv',sep=""))
}
#Run for all modules and write outputs
for(c in allMods){
getEnrichTerms(geneID2GO = geneID2GO,modMetadata = atlas_deseq2_genes_fortopGO_metadata, clus = c)
}
library(usedist)
library(phangorn)
library(readr)
library(tidyverse)
library(hash)
#splitsTree_df <-  as.tibble(read_csv("~/Downloads/geneClustDist_SplitsTree.csv"))
splitsTree_df <-  as.tibble(read_csv("~/Desktop/cellTypeDist_SplitsTree.csv"))
#Make annotations Nexus compatible
#Change names
j = 0
na_j = 0
for (i in splitsTree_df["annos"][[1]]){
j = j+1
if (is.na(i)){
na_j = na_j +1
splitsTree_df["annos"][[1]][j] = paste("NA",as.character(na_j),sep="_")
}
}
newName <- function(name){
new = gsub("- ", "",name)
new = gsub(" ", "_",new)
}
splitsTree_df[c("annos")] <-
lapply(splitsTree_df[c("annos")], function(col) map(col,newName))
#Convert to df for distance calculations
splitsTree_df <- as.data.frame(splitsTree_df)
rownames(splitsTree_df) <- splitsTree_df$annos
splitsTree_df <- subset(splitsTree_df,select=-c(annos,cluster,X1))
#Get pairwise (Euclidean) distances
d <- dist(splitsTree_df,upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
write.nexus.dist(d,file="~/Desktop/distCellType.nex", append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
library(usedist)
library(phangorn)
library(readr)
library(tidyverse)
library(hash)
splitsTree_df <-  as.tibble(read_csv("~/Desktop/geneClustDist_SplitsTree.csv"))
#splitsTree_df <-  as.tibble(read_csv("~/Desktop/cellTypeDist_SplitsTree.csv"))
#Make annotations Nexus compatible
#Change names
j = 0
na_j = 0
for (i in splitsTree_df["annos"][[1]]){
j = j+1
if (is.na(i)){
na_j = na_j +1
splitsTree_df["annos"][[1]][j] = paste("NA",as.character(na_j),sep="_")
}
}
newName <- function(name){
new = gsub("- ", "",name)
new = gsub(" ", "_",new)
}
splitsTree_df[c("annos")] <-
lapply(splitsTree_df[c("annos")], function(col) map(col,newName))
#Convert to df for distance calculations
splitsTree_df <- as.data.frame(splitsTree_df)
rownames(splitsTree_df) <- splitsTree_df$annos
splitsTree_df <- subset(splitsTree_df,select=-c(annos,cluster,X1))
#Get pairwise (Euclidean) distances
d <- dist(splitsTree_df,upper = FALSE,diag = TRUE)
#Write distance matrix as nexus file
write.nexus.dist(d,file="~/Desktop/distGeneClus.nex", append = FALSE, upper = FALSE,
diag = TRUE, digits = getOption("digits"))
install.packages('rlang')
if (!requireNamespace("BiocManager", quietly=TRUE))
+ install.packages("BiocManager")
BiocManager::install(version = "3.10") #Only for R 3.6
library(topGO)
library(ALL)
library(readr)
#Read in DE genes (XLOC's) with GO Terms
geneID2GO <- readMappings(file = "~/Desktop/atlas_deseq2_genes_fortopGO.txt")
str(head(geneID2GO ))
#Add gene modules as factor
atlas_deseq2_genes_fortopGO_metadata <- read_delim("~/Desktop/atlas_deseq2_genes_fortopGO_metadata.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
#Set variables
allMods = unique(atlas_deseq2_genes_fortopGO_metadata$X3)
alpha = 0.05/length(allMods) #Bonferroni correction, could correct for all pairwise comparisons?
getEnrichTerms <- function(geneID2GO, modMetadata, clus){
mods <- factor(as.integer(modMetadata$X3 == clus)) #Choose gene module to make 'interesting'
names(mods) <- names(geneID2GO)
#str(mods)
#Get genes only in module of interest
clusGenes <- function(mods) {
return(mods == 1)
}
subMods <- clusGenes(mods)
#Make GO data
GOdata <- new("topGOdata", ontology = "BP", allGenes = mods,
geneSel = subMods, annot = annFUN.gene2GO, gene2GO = geneID2GO)
#GOdata
#sigGenes(GOdata)
resultFis <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
#resultFis
resultWeight <- runTest(GOdata, statistic = "fisher")
#resultWeight
# pvalsFis <- score(resultFis)
# head(pvalsFis)
pvalsWeight <- score(resultWeight)
#head(pvalsWeight)
#hist(pvalsWeight, 50, xlab = "p-values")
allRes <- GenTable(GOdata, classic = resultFis, weight = resultWeight,
orderBy = "weight", ranksOf = "classic", topNodes = 20)
subRes <- allRes[as.numeric(allRes$weight) < alpha,]
#Write output
write.csv(subRes,file=paste('mod',clus,'_GOTerms.csv',sep=""))
}
#Run for all modules and write outputs
for(c in allMods){
getEnrichTerms(geneID2GO = geneID2GO,modMetadata = atlas_deseq2_genes_fortopGO_metadata, clus = c)
}
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("usedist","phangorn","readr","tidyverse","tidyr","hash","STAT","graphics","grDevices","ggpubr","viridis","stringi","pheatmap","gplots","scales")
#Set wd()
setwd("~/Desktop/Pachter_Lab/CP_2021")
source('scripts/distFuncs.R')
#Read in and generate data for analysis
unzip(zipfile = "./data/voteData.zip", exdir = "./data")
Sall_members <- as.tibble(read_csv("./data/Sall_members.csv") )
Sall_votes <- as.tibble(read_csv("./data/Sall_votes.csv"))
#Get real names
Sall_votes[c("name")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$bioname[match(col, Sall_members$icpsr)])
#Get party affiliation
Sall_votes[c("party_code")] <-
lapply(Sall_votes[c("icpsr")], function(col) Sall_members$party_code[match(col, Sall_members$icpsr)])
class(Sall_votes)
#Sall_votes <- na.omit(Sall_votes)
write.table(Sall_votes , file = "./data/Sall_votes_withPartyAndNames.csv",sep=",",row.names = FALSE)
source('scripts/distFuncs.R')
#Senate member voting records
Sall_votes <- as_tibble(read_csv("./data/Sall_votes_withPartyAndNames.csv") )
#Information on each vote (rollcall number)
Sall_vote_dates <- as_tibble(read.csv("./data/Sall_rollcalls.csv", colClasses = c("numeric","character","numeric","character","character","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric","character","character","character","character","character")))
# ------------- Make distance matrix and nexus output for 116th congresses -------------
cong <- 116
Sall_votes_sub  <- Sall_votes %>% filter(congress == cong)
cong <- 116
Sall_votes_dem <- Sall_votes %>% filter(congress == cong)
Sall_votes_dem  <- Sall_votes_dem %>% filter(party_code != 200)
cong <- 116
Sall_votes_rep <- Sall_votes %>% filter(congress == cong)
Sall_votes_rep  <- Sall_votes_rep %>% filter(party_code == 200)
cong <- 116
Sall_votes_dem <- Sall_votes %>% filter(congress == cong)
Sall_votes_dem  <- Sall_votes_dem %>% filter(party_code != 200)
votesDem <- makeVoteMat(Sall_votes_dem)
rows <- rownames(votesDem)
rollcallNums <- 1:length(votesDem)
ppl <- c("MANCHIN_J_Dem","SINEMA_K_Dem",
"JONES_G_Dem")
names <- rownames(votesDem)
#Binarize names for members on one side of split
bin_names <- as.integer(names %in% ppl)
pvals <- calcSplitVotPval(votesDem,bin_names)
#plot(rollcallNums,-log10(pvals))
#Colored plot relating to temporal votes
sorted_pvals <- sort(-log10(pvals), decreasing = TRUE, index.return=TRUE)
topInd <- sorted_pvals$ix[sorted_pvals$x>3]
color <- rollcallNums
inTop <- color %in% topInd
color[inTop] <- 'Top Ranked'
color[!inTop] <- 'Rest'
pvalPlot <- data.frame(rollcallNums, -log10(pvals),color)
colnames(pvalPlot) <- c('Rollcall','-log10(P-value)','color')
ggplot(pvalPlot, aes(x=Rollcall, y=`-log10(P-value)`)) +
geom_point(aes(x=Rollcall, y=`-log10(P-value)`,color=color),alpha=0.7) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title=element_text(size=8),plot.title = element_text(size = 10)) +
xlab('Vote Rollcall Number') +
ylab('-log10(p-value)') +
labs(color="Votes")+
scale_color_manual(values=c("grey","black"))+
ggtitle("Votes for {MANCHIN,SINEMA,JONES} Split")
ggsave("./figures/pvalVotes_rand2.pdf",width=5, height=3)
#Get vote descriptions for set of ranked votes
Sall_vote_dates_sub  <- Sall_vote_dates %>% filter(congress == cong)
vote_ques <- Sall_vote_dates_sub$vote_question[Sall_vote_dates_sub$rollnumber %in% topInd]
vote_desc <- Sall_vote_dates_sub$vote_desc[Sall_vote_dates_sub$rollnumber %in% topInd]
plot(as.factor(vote_ques))
#descrPlot  <- data.frame(topInd, vote_ques)
descrPlot  <- data.frame(1:length(vote_ques), vote_ques)
colnames(descrPlot ) <- c('Rollcall','Vote Topic')
ggplot(descrPlot) + geom_bar(aes(y = `Vote Topic`),fill = "black",alpha=0.8) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title=element_text(size=8),axis.text.x = element_text( size=7),
axis.text.y = element_text( size=7),plot.title = element_text(size = 10)) +
ggtitle('Vote Topics for Top Votes')+
ylab('')+
xlab('Counts')
ggsave("./figures/voteTopics.png",width=5, height=3)
vote_desc
